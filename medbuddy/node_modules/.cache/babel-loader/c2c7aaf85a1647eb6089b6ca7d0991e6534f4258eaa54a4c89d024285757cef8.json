{"ast":null,"code":"var _jsxFileName = \"S:\\\\New folder\\\\medbuddy\\\\src\\\\components\\\\CameraScanner.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { speakText } from \"./audioUtils\"; // Helper to convert text to speech\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CameraScanner = () => {\n  _s();\n  const [scannedMedicine, setScannedMedicine] = useState(null);\n  const [userResponse, setUserResponse] = useState(null);\n  const scanMedicine = async () => {\n    try {\n      const response = await fetch(\"/upload\", {\n        method: \"POST\"\n      }); // Sends image for OCR processing\n      const data = await response.json();\n      if (data.medicine) {\n        setScannedMedicine(data.medicine);\n        checkDosageStatus(data.medicine);\n      } else {\n        speakText(\"Medicine not recognized. Please try again.\");\n      }\n    } catch (error) {\n      console.error(\"Error scanning:\", error);\n    }\n  };\n  const checkDosageStatus = async medicine => {\n    try {\n      const response = await fetch(\"/check-dosage\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          medicine\n        })\n      });\n      const data = await response.json();\n      if (data.overdose) {\n        speakText(`Warning! You have already taken the prescribed amount of ${medicine}.`);\n      } else if (data.next_dose_time) {\n        speakText(`You should take ${medicine} at ${data.next_dose_time}. Have you taken it now?`);\n        listenForResponse(medicine); // Capture user's audio response\n      } else {\n        speakText(\"Error checking dosage.\");\n      }\n    } catch (error) {\n      console.error(\"Error checking dosage:\", error);\n    }\n  };\n  const listenForResponse = medicine => {\n    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n    recognition.lang = \"en-US\";\n    recognition.start();\n    recognition.onresult = async event => {\n      const responseText = event.results[0][0].transcript.toLowerCase();\n      setUserResponse(responseText);\n      if (responseText.includes(\"yes\")) {\n        await fetch(\"/log-dosage\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            medicine\n          })\n        });\n        speakText(`Your dose for ${medicine} has been recorded.`);\n      } else {\n        speakText(\"No dose recorded. Please take your medicine on time.\");\n      }\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: scanMedicine,\n      children: \"Scan Medicine\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(CameraScanner, \"UliiNed12mWW29Mlb/1zBWU5n4Q=\");\n_c = CameraScanner;\nexport default CameraScanner;\nvar _c;\n$RefreshReg$(_c, \"CameraScanner\");","map":{"version":3,"names":["useState","speakText","jsxDEV","_jsxDEV","CameraScanner","_s","scannedMedicine","setScannedMedicine","userResponse","setUserResponse","scanMedicine","response","fetch","method","data","json","medicine","checkDosageStatus","error","console","headers","body","JSON","stringify","overdose","next_dose_time","listenForResponse","recognition","window","SpeechRecognition","webkitSpeechRecognition","lang","start","onresult","event","responseText","results","transcript","toLowerCase","includes","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["S:/New folder/medbuddy/src/components/CameraScanner.js"],"sourcesContent":["import { useState } from \"react\";\nimport { speakText } from \"./audioUtils\"; // Helper to convert text to speech\n\nconst CameraScanner = () => {\n  const [scannedMedicine, setScannedMedicine] = useState(null);\n  const [userResponse, setUserResponse] = useState(null);\n\n  const scanMedicine = async () => {\n    try {\n      const response = await fetch(\"/upload\", { method: \"POST\" }); // Sends image for OCR processing\n      const data = await response.json();\n      if (data.medicine) {\n        setScannedMedicine(data.medicine);\n        checkDosageStatus(data.medicine);\n      } else {\n        speakText(\"Medicine not recognized. Please try again.\");\n      }\n    } catch (error) {\n      console.error(\"Error scanning:\", error);\n    }\n  };\n\n  const checkDosageStatus = async (medicine) => {\n    try {\n      const response = await fetch(\"/check-dosage\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ medicine }),\n      });\n      const data = await response.json();\n\n      if (data.overdose) {\n        speakText(`Warning! You have already taken the prescribed amount of ${medicine}.`);\n      } else if (data.next_dose_time) {\n        speakText(`You should take ${medicine} at ${data.next_dose_time}. Have you taken it now?`);\n        listenForResponse(medicine); // Capture user's audio response\n      } else {\n        speakText(\"Error checking dosage.\");\n      }\n    } catch (error) {\n      console.error(\"Error checking dosage:\", error);\n    }\n  };\n\n  const listenForResponse = (medicine) => {\n    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n    recognition.lang = \"en-US\";\n    recognition.start();\n\n    recognition.onresult = async (event) => {\n      const responseText = event.results[0][0].transcript.toLowerCase();\n      setUserResponse(responseText);\n\n      if (responseText.includes(\"yes\")) {\n        await fetch(\"/log-dosage\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ medicine }),\n        });\n        speakText(`Your dose for ${medicine} has been recorded.`);\n      } else {\n        speakText(\"No dose recorded. Please take your medicine on time.\");\n      }\n    };\n  };\n\n  return (\n    <div>\n      <button onClick={scanMedicine}>Scan Medicine</button>\n    </div>\n  );\n};\n\nexport default CameraScanner;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}