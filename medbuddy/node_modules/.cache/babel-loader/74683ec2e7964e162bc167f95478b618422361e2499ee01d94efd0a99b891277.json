{"ast":null,"code":"var _jsxFileName = \"S:\\\\New folder\\\\medbuddy\\\\src\\\\components\\\\CameraScanner.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CameraScanner = () => {\n  _s();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [medicineInfo, setMedicineInfo] = useState(\"\");\n\n  // Function to start the camera\n  const startCamera = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true\n      });\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n      }\n    } catch (error) {\n      console.error(\"Error accessing camera:\", error);\n    }\n  };\n\n  // Function to capture and process the image\n  const captureAndUploadImage = async () => {\n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n    if (canvas && video) {\n      const context = canvas.getContext(\"2d\");\n      context.drawImage(video, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(async blob => {\n        const formData = new FormData();\n        formData.append(\"image\", blob, \"medicine.jpg\");\n        try {\n          const response = await fetch(\"http://localhost:5000/upload\", {\n            method: \"POST\",\n            body: formData\n          });\n          const data = await response.json();\n          if (data.medicine) {\n            setMedicineInfo(data.medicine);\n            speakMedicineInfo(data.medicine, data.description);\n          } else {\n            setMedicineInfo(\"Not prescribed by doctor\");\n            speakMedicineInfo(null, null);\n          }\n        } catch (error) {\n          console.error(\"Error uploading image:\", error);\n        }\n      }, \"image/jpeg\");\n    }\n  };\n\n  // Function to convert medicine name and info to speech\n  const speakMedicineInfo = (name, description) => {\n    const speech = new SpeechSynthesisUtterance();\n    if (name) {\n      speech.text = `The medicine is ${name}. ${description ? \"Uses: \" + description : \"No additional details available.\"}`;\n    } else {\n      speech.text = \"This medicine is not prescribed by your doctor.\";\n    }\n    speech.lang = \"en-US\";\n    speech.rate = 1;\n    window.speechSynthesis.speak(speech);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Medicine Scanner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      playsInline: true,\n      width: \"300\",\n      height: \"200\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: \"300\",\n      height: \"200\",\n      style: {\n        display: \"none\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startCamera,\n      children: \"Start Camera\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: captureAndUploadImage,\n      children: \"Scan Medicine\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), medicineInfo && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Detected Medicine:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 33\n      }, this), \" \", medicineInfo]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n_s(CameraScanner, \"pE/K768wB0KKC5+C0iC4RlrcGsI=\");\n_c = CameraScanner;\nexport default CameraScanner;\nvar _c;\n$RefreshReg$(_c, \"CameraScanner\");","map":{"version":3,"names":["React","useRef","useState","jsxDEV","_jsxDEV","CameraScanner","_s","videoRef","canvasRef","medicineInfo","setMedicineInfo","startCamera","stream","navigator","mediaDevices","getUserMedia","video","current","srcObject","error","console","captureAndUploadImage","canvas","context","getContext","drawImage","width","height","toBlob","blob","formData","FormData","append","response","fetch","method","body","data","json","medicine","speakMedicineInfo","description","name","speech","SpeechSynthesisUtterance","text","lang","rate","window","speechSynthesis","speak","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","autoPlay","playsInline","style","display","onClick","_c","$RefreshReg$"],"sources":["S:/New folder/medbuddy/src/components/CameraScanner.js"],"sourcesContent":["import React, { useRef, useState } from \"react\";\n\nconst CameraScanner = () => {\n    const videoRef = useRef(null);\n    const canvasRef = useRef(null);\n    const [medicineInfo, setMedicineInfo] = useState(\"\");\n\n    // Function to start the camera\n    const startCamera = async () => {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n            if (videoRef.current) {\n                videoRef.current.srcObject = stream;\n            }\n        } catch (error) {\n            console.error(\"Error accessing camera:\", error);\n        }\n    };\n\n    // Function to capture and process the image\n    const captureAndUploadImage = async () => {\n        const canvas = canvasRef.current;\n        const video = videoRef.current;\n\n        if (canvas && video) {\n            const context = canvas.getContext(\"2d\");\n            context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n            canvas.toBlob(async (blob) => {\n                const formData = new FormData();\n                formData.append(\"image\", blob, \"medicine.jpg\");\n\n                try {\n                    const response = await fetch(\"http://localhost:5000/upload\", {\n                        method: \"POST\",\n                        body: formData,\n                    });\n\n                    const data = await response.json();\n                    if (data.medicine) {\n                        setMedicineInfo(data.medicine);\n                        speakMedicineInfo(data.medicine, data.description);\n                    } else {\n                        setMedicineInfo(\"Not prescribed by doctor\");\n                        speakMedicineInfo(null, null);\n                    }\n                } catch (error) {\n                    console.error(\"Error uploading image:\", error);\n                }\n            }, \"image/jpeg\");\n        }\n    };\n\n    // Function to convert medicine name and info to speech\n    const speakMedicineInfo = (name, description) => {\n        const speech = new SpeechSynthesisUtterance();\n        if (name) {\n            speech.text = `The medicine is ${name}. ${description ? \"Uses: \" + description : \"No additional details available.\"}`;\n        } else {\n            speech.text = \"This medicine is not prescribed by your doctor.\";\n        }\n        speech.lang = \"en-US\";\n        speech.rate = 1;\n        window.speechSynthesis.speak(speech);\n    };\n\n    return (\n        <div>\n            <h2>Medicine Scanner</h2>\n            <video ref={videoRef} autoPlay playsInline width=\"300\" height=\"200\"></video>\n            <canvas ref={canvasRef} width=\"300\" height=\"200\" style={{ display: \"none\" }}></canvas>\n            <button onClick={startCamera}>Start Camera</button>\n            <button onClick={captureAndUploadImage}>Scan Medicine</button>\n            {medicineInfo && <p><b>Detected Medicine:</b> {medicineInfo}</p>}\n        </div>\n    );\n};\n\nexport default CameraScanner;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}