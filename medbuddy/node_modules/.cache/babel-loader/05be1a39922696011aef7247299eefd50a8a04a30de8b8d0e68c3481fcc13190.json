{"ast":null,"code":"const captureAndUploadImage = async () => {\n  const canvas = canvasRef.current;\n  const video = videoRef.current;\n  if (canvas && video) {\n    const context = canvas.getContext(\"2d\");\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    canvas.toBlob(async blob => {\n      const formData = new FormData();\n      formData.append(\"image\", blob, \"medicine.jpg\");\n      try {\n        const response = await fetch(\"http://localhost:5000/upload\", {\n          method: \"POST\",\n          body: formData\n        });\n        const data = await response.json();\n        setMedicineInfo(data.medicine);\n      } catch (error) {\n        console.error(\"Error uploading image:\", error);\n      }\n    }, \"image/jpeg\");\n  }\n};","map":{"version":3,"names":["captureAndUploadImage","canvas","canvasRef","current","video","videoRef","context","getContext","drawImage","width","height","toBlob","blob","formData","FormData","append","response","fetch","method","body","data","json","setMedicineInfo","medicine","error","console"],"sources":["S:/New folder/medbuddy/src/components/CameraScanner.js"],"sourcesContent":["const captureAndUploadImage = async () => {\n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n\n    if (canvas && video) {\n        const context = canvas.getContext(\"2d\");\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\n        \n        canvas.toBlob(async (blob) => {\n            const formData = new FormData();\n            formData.append(\"image\", blob, \"medicine.jpg\");\n\n            try {\n                const response = await fetch(\"http://localhost:5000/upload\", {\n                    method: \"POST\",\n                    body: formData,\n                });\n\n                const data = await response.json();\n                setMedicineInfo(data.medicine);\n            } catch (error) {\n                console.error(\"Error uploading image:\", error);\n            }\n        }, \"image/jpeg\");\n    }\n};\n"],"mappings":"AAAA,MAAMA,qBAAqB,GAAG,MAAAA,CAAA,KAAY;EACtC,MAAMC,MAAM,GAAGC,SAAS,CAACC,OAAO;EAChC,MAAMC,KAAK,GAAGC,QAAQ,CAACF,OAAO;EAE9B,IAAIF,MAAM,IAAIG,KAAK,EAAE;IACjB,MAAME,OAAO,GAAGL,MAAM,CAACM,UAAU,CAAC,IAAI,CAAC;IACvCD,OAAO,CAACE,SAAS,CAACJ,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEH,MAAM,CAACQ,KAAK,EAAER,MAAM,CAACS,MAAM,CAAC;IAE3DT,MAAM,CAACU,MAAM,CAAC,MAAOC,IAAI,IAAK;MAC1B,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,IAAI,EAAE,cAAc,CAAC;MAE9C,IAAI;QACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;UACzDC,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEN;QACV,CAAC,CAAC;QAEF,MAAMO,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCC,eAAe,CAACF,IAAI,CAACG,QAAQ,CAAC;MAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAClD;IACJ,CAAC,EAAE,YAAY,CAAC;EACpB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}