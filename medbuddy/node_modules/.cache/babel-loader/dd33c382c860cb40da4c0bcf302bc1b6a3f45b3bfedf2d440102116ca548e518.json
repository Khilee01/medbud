{"ast":null,"code":"var _jsxFileName = \"S:\\\\New folder\\\\medbuddy\\\\src\\\\CameraScanner.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport Webcam from \"react-webcam\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { fetchMedicineUses } from \"./searchMedicine\";\nimport \"./\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CameraScanner = () => {\n  _s();\n  const webcamRef = useRef(null);\n  const navigate = useNavigate();\n  const [image, setImage] = useState(null);\n  const [medicineText, setMedicineText] = useState(\"\");\n  const [medicineUses, setMedicineUses] = useState(\"\");\n\n  // Capture image from webcam\n  const capture = async () => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    setImage(imageSrc);\n\n    // Perform OCR to extract text\n    const extractedText = await analyzeImage(imageSrc);\n    setMedicineText(extractedText);\n\n    // Fetch medicine usage details\n    const uses = await fetchMedicineUses(extractedText);\n    setMedicineUses(uses);\n  };\n\n  // Function to analyze image using Google Vision API\n  const analyzeImage = async base64Image => {\n    const apiKey = \"YOUR_GOOGLE_VISION_API_KEY\"; // Replace with your Google Vision API key\n    const visionApiUrl = `https://vision.googleapis.com/v1/images:annotate?key=${apiKey}`;\n    const requestData = {\n      requests: [{\n        image: {\n          content: base64Image.split(\",\")[1]\n        },\n        features: [{\n          type: \"TEXT_DETECTION\"\n        }]\n      }]\n    };\n    try {\n      var _response$data$respon, _response$data$respon2;\n      const response = await axios.post(visionApiUrl, requestData);\n      const detectedText = ((_response$data$respon = response.data.responses[0]) === null || _response$data$respon === void 0 ? void 0 : (_response$data$respon2 = _response$data$respon.fullTextAnnotation) === null || _response$data$respon2 === void 0 ? void 0 : _response$data$respon2.text) || \"No text found\";\n      return detectedText;\n    } catch (error) {\n      console.error(\"Error in OCR:\", error);\n      return \"Error in scanning\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Scan Medicine\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Webcam, {\n      ref: webcamRef,\n      screenshotFormat: \"image/png\",\n      className: \"camera\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: capture,\n      children: \"Scan Medicine\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), image && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: image,\n      alt: \"Scanned\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this), medicineText && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Detected Text: \", medicineText]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 24\n    }, this), medicineUses && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Uses: \", medicineUses]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(\"/\"),\n      children: \"Back to Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(CameraScanner, \"qEo5xRJaGrJztlW3inVbhJhHwVg=\", false, function () {\n  return [useNavigate];\n});\n_c = CameraScanner;\nexport default CameraScanner;\nvar _c;\n$RefreshReg$(_c, \"CameraScanner\");","map":{"version":3,"names":["React","useRef","useState","Webcam","axios","useNavigate","fetchMedicineUses","jsxDEV","_jsxDEV","CameraScanner","_s","webcamRef","navigate","image","setImage","medicineText","setMedicineText","medicineUses","setMedicineUses","capture","imageSrc","current","getScreenshot","extractedText","analyzeImage","uses","base64Image","apiKey","visionApiUrl","requestData","requests","content","split","features","type","_response$data$respon","_response$data$respon2","response","post","detectedText","data","responses","fullTextAnnotation","text","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","screenshotFormat","className","onClick","src","alt","_c","$RefreshReg$"],"sources":["S:/New folder/medbuddy/src/CameraScanner.js"],"sourcesContent":["import React, { useRef, useState } from \"react\";\nimport Webcam from \"react-webcam\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { fetchMedicineUses } from \"./searchMedicine\";\nimport \"./\"\n\nconst CameraScanner = () => {\n  const webcamRef = useRef(null);\n  const navigate = useNavigate();\n  const [image, setImage] = useState(null);\n  const [medicineText, setMedicineText] = useState(\"\");\n  const [medicineUses, setMedicineUses] = useState(\"\");\n\n  // Capture image from webcam\n  const capture = async () => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    setImage(imageSrc);\n\n    // Perform OCR to extract text\n    const extractedText = await analyzeImage(imageSrc);\n    setMedicineText(extractedText);\n\n    // Fetch medicine usage details\n    const uses = await fetchMedicineUses(extractedText);\n    setMedicineUses(uses);\n  };\n\n  // Function to analyze image using Google Vision API\n  const analyzeImage = async (base64Image) => {\n    const apiKey = \"YOUR_GOOGLE_VISION_API_KEY\";  // Replace with your Google Vision API key\n    const visionApiUrl = `https://vision.googleapis.com/v1/images:annotate?key=${apiKey}`;\n\n    const requestData = {\n      requests: [\n        {\n          image: { content: base64Image.split(\",\")[1] },\n          features: [{ type: \"TEXT_DETECTION\" }],\n        },\n      ],\n    };\n\n    try {\n      const response = await axios.post(visionApiUrl, requestData);\n      const detectedText = response.data.responses[0]?.fullTextAnnotation?.text || \"No text found\";\n      return detectedText;\n    } catch (error) {\n      console.error(\"Error in OCR:\", error);\n      return \"Error in scanning\";\n    }\n  };\n\n  return (\n    <div>\n      <h2>Scan Medicine</h2>\n      <Webcam ref={webcamRef} screenshotFormat=\"image/png\" className=\"camera\"/>\n      <button onClick={capture}>Scan Medicine</button>\n\n      {image && <img src={image} alt=\"Scanned\" />}\n      {medicineText && <p>Detected Text: {medicineText}</p>}\n      {medicineUses && <p>Uses: {medicineUses}</p>}\n\n      <button onClick={() => navigate(\"/\")}>Back to Home</button>\n    </div>\n  );\n};\n\nexport default CameraScanner;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}