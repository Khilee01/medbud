{"ast":null,"code":"var _jsxFileName = \"S:\\\\New folder\\\\medbuddy\\\\src\\\\CameraScanner.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CameraScanner = () => {\n  _s();\n  const [imagePreview, setImagePreview] = useState(null);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Start Camera\n  const startCamera = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true\n      });\n      videoRef.current.srcObject = stream;\n    } catch (error) {\n      console.error(\"Error accessing camera:\", error);\n    }\n  };\n\n  // Capture Image\n  const captureImage = () => {\n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n    const context = canvas.getContext(\"2d\");\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    // Convert image to Base64\n    const imageData = canvas.toDataURL(\"image/jpeg\").split(\",\")[1];\n    setImagePreview(canvas.toDataURL(\"image/jpeg\"));\n    uploadToLambda(imageData);\n  };\n\n  // Upload Image to AWS Lambda\n  const uploadToLambda = async imageData => {\n    const response = await fetch(\"https://YOUR-LAMBDA-API-GATEWAY\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        imageData,\n        fileName: `medicine-${Date.now()}.jpg`\n      })\n    });\n    const result = await response.json();\n    console.log(\"Upload Result:\", result);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      playsInline: true,\n      width: \"300\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startCamera,\n      children: \"Start Camera\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: captureImage,\n      children: \"Capture Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        display: \"none\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), imagePreview && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imagePreview,\n      alt: \"Captured\",\n      width: \"200\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(CameraScanner, \"/76A6aAdhBFq6542MDSHmrYY0XE=\");\n_c = CameraScanner;\nexport default CameraScanner;\nvar _c;\n$RefreshReg$(_c, \"CameraScanner\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","CameraScanner","_s","imagePreview","setImagePreview","videoRef","canvasRef","startCamera","stream","navigator","mediaDevices","getUserMedia","video","current","srcObject","error","console","captureImage","canvas","context","getContext","width","videoWidth","height","videoHeight","drawImage","imageData","toDataURL","split","uploadToLambda","response","fetch","method","headers","body","JSON","stringify","fileName","Date","now","result","json","log","children","ref","autoPlay","playsInline","_jsxFileName","lineNumber","columnNumber","onClick","style","display","src","alt","_c","$RefreshReg$"],"sources":["S:/New folder/medbuddy/src/CameraScanner.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\n\nconst CameraScanner = () => {\n  const [imagePreview, setImagePreview] = useState(null);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Start Camera\n  const startCamera = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n      videoRef.current.srcObject = stream;\n    } catch (error) {\n      console.error(\"Error accessing camera:\", error);\n    }\n  };\n\n  // Capture Image\n  const captureImage = () => {\n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n    const context = canvas.getContext(\"2d\");\n    \n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    // Convert image to Base64\n    const imageData = canvas.toDataURL(\"image/jpeg\").split(\",\")[1];\n    setImagePreview(canvas.toDataURL(\"image/jpeg\"));\n    \n    uploadToLambda(imageData);\n  };\n\n  // Upload Image to AWS Lambda\n  const uploadToLambda = async (imageData) => {\n    const response = await fetch(\"https://YOUR-LAMBDA-API-GATEWAY\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        imageData,\n        fileName: `medicine-${Date.now()}.jpg`\n      })\n    });\n\n    const result = await response.json();\n    console.log(\"Upload Result:\", result);\n  };\n\n  return (\n    <div>\n      <video ref={videoRef} autoPlay playsInline width=\"300\"></video>\n      <button onClick={startCamera}>Start Camera</button>\n      <button onClick={captureImage}>Capture Image</button>\n      <canvas ref={canvasRef} style={{ display: \"none\" }}></canvas>\n      {imagePreview && <img src={imagePreview} alt=\"Captured\" width=\"200\" />}\n    </div>\n  );\n};\n\nexport default CameraScanner;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}