{"ast":null,"code":"var _jsxFileName = \"S:\\\\New folder\\\\medbuddy\\\\src\\\\CameraScanner.js\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CameraScanner = () => {\n  _s();\n  const [medicineInfo, setMedicineInfo] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [error, setError] = useState(null);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Start the camera automatically when the component loads\n  useEffect(() => {\n    const startCamera = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n      } catch (error) {\n        console.error(\"Error accessing camera:\", error);\n        setError(\"Camera access denied. Please allow camera permissions.\");\n      }\n    };\n    startCamera();\n  }, []);\n\n  // Capture image and automatically upload it\n  const captureAndUploadImage = async () => {\n    setIsProcessing(true); // Show \"Processing...\" message\n\n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n    if (canvas && video) {\n      const context = canvas.getContext(\"2d\");\n      context.drawImage(video, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(async blob => {\n        const file = new File([blob], \"captured-image.jpg\", {\n          type: \"image/jpeg\"\n        });\n        try {\n          const bucketName = \"medbuddy-medicine-images\"; // Your S3 bucket\n          const imageName = `uploads/${file.name}`;\n\n          // Upload image to S3\n          const uploadUrl = `https://xqw2x3kybi.execute-api.ap-south-1.amazonaws.com/test/camerafunction`;\n          await axios.put(uploadUrl, file, {\n            headers: {\n              \"Content-Type\": file.type\n            }\n          });\n\n          // Call Lambda function to extract medicine details\n          const lambdaUrl = \"https://xqw2x3kybi.execute-api.ap-south-1.amazonaws.com/test/extract\";\n          const response = await axios.post(lambdaUrl, {\n            bucketName,\n            imageName\n          });\n\n          // Show results\n          setMedicineInfo(response.data);\n        } catch (error) {\n          console.error(\"Error processing image:\", error);\n          setError(\"Failed to process image. Please try again.\");\n        } finally {\n          setIsProcessing(false);\n        }\n      }, \"image/jpeg\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scanPage\",\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      className: \"camera\",\n      ref: videoRef,\n      autoPlay: true,\n      playsInline: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: \"300\",\n      height: \"200\",\n      style: {\n        display: \"none\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), !isProcessing ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"capture-btn\",\n      onClick: captureAndUploadImage,\n      children: \"Capture Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"processing\",\n      children: \"Processing...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this), medicineInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"medicine-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Detected Medicine: \", medicineInfo.medicineName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: JSON.stringify(medicineInfo.medicineDetails, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n_s(CameraScanner, \"ddf5sugg+a0y9R0MkE1PL+kNq8w=\");\n_c = CameraScanner;\nexport default CameraScanner;\nvar _c;\n$RefreshReg$(_c, \"CameraScanner\");","map":{"version":3,"names":["axios","React","useEffect","useRef","useState","jsxDEV","_jsxDEV","CameraScanner","_s","medicineInfo","setMedicineInfo","isProcessing","setIsProcessing","error","setError","videoRef","canvasRef","startCamera","stream","navigator","mediaDevices","getUserMedia","video","current","srcObject","console","captureAndUploadImage","canvas","context","getContext","drawImage","width","height","toBlob","blob","file","File","type","bucketName","imageName","name","uploadUrl","put","headers","lambdaUrl","response","post","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","autoPlay","playsInline","style","display","onClick","medicineName","JSON","stringify","medicineDetails","_c","$RefreshReg$"],"sources":["S:/New folder/medbuddy/src/CameraScanner.js"],"sourcesContent":["import axios from \"axios\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nconst CameraScanner = () => {\n    const [medicineInfo, setMedicineInfo] = useState(null);\n    const [isProcessing, setIsProcessing] = useState(false);\n    const [error, setError] = useState(null);\n    const videoRef = useRef(null);\n    const canvasRef = useRef(null);\n\n    // Start the camera automatically when the component loads\n    useEffect(() => {\n        const startCamera = async () => {\n            try {\n                const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n                if (videoRef.current) {\n                    videoRef.current.srcObject = stream;\n                }\n            } catch (error) {\n                console.error(\"Error accessing camera:\", error);\n                setError(\"Camera access denied. Please allow camera permissions.\");\n            }\n        };\n\n        startCamera();\n    }, []);\n\n    // Capture image and automatically upload it\n    const captureAndUploadImage = async () => {\n        setIsProcessing(true); // Show \"Processing...\" message\n\n        const canvas = canvasRef.current;\n        const video = videoRef.current;\n        if (canvas && video) {\n            const context = canvas.getContext(\"2d\");\n            context.drawImage(video, 0, 0, canvas.width, canvas.height);\n            canvas.toBlob(async (blob) => {\n                const file = new File([blob], \"captured-image.jpg\", { type: \"image/jpeg\" });\n\n                try {\n                    const bucketName = \"medbuddy-medicine-images\"; // Your S3 bucket\n                    const imageName = `uploads/${file.name}`;\n\n                    // Upload image to S3\n                    const uploadUrl = `https://xqw2x3kybi.execute-api.ap-south-1.amazonaws.com/test/camerafunction`;\n                    await axios.put(uploadUrl, file, { headers: { \"Content-Type\": file.type } });\n\n                    // Call Lambda function to extract medicine details\n                    const lambdaUrl = \"https://xqw2x3kybi.execute-api.ap-south-1.amazonaws.com/test/extract\";\n                    const response = await axios.post(lambdaUrl, { bucketName, imageName });\n\n                    // Show results\n                    setMedicineInfo(response.data);\n                } catch (error) {\n                    console.error(\"Error processing image:\", error);\n                    setError(\"Failed to process image. Please try again.\");\n                } finally {\n                    setIsProcessing(false);\n                }\n            }, \"image/jpeg\");\n        }\n    };\n\n    return (\n        <div className=\"scanPage\">\n            {error && <p className=\"error\">{error}</p>}\n            <video className=\"camera\" ref={videoRef} autoPlay playsInline></video>\n            <canvas ref={canvasRef} width=\"300\" height=\"200\" style={{ display: \"none\" }}></canvas>\n\n            {!isProcessing ? (\n                <button className=\"capture-btn\" onClick={captureAndUploadImage}>Capture Image</button>\n            ) : (\n                <p className=\"processing\">Processing...</p>\n            )}\n\n            {medicineInfo && (\n                <div className=\"medicine-info\">\n                    <h3>Detected Medicine: {medicineInfo.medicineName}</h3>\n                    <p>{JSON.stringify(medicineInfo.medicineDetails, null, 2)}</p>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default CameraScanner;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}