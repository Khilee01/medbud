{"ast":null,"code":"var _jsxFileName = \"S:\\\\New folder\\\\medbuddy\\\\src\\\\components\\\\CameraScanner.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { speakText } from \"./audioUtils\"; // Helper to convert text to speech\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CameraScanner = () => {\n  _s();\n  const [scannedMedicine, setScannedMedicine] = useState(null);\n  const [userResponse, setUserResponse] = useState(null);\n  const scanMedicine = async () => {\n    const canvas = document.createElement(\"canvas\");\n    const video = document.querySelector(\"video\");\n    if (!video) return;\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n    canvas.toBlob(async blob => {\n      const formData = new FormData();\n      formData.append(\"image\", blob, \"capture.jpg\");\n      try {\n        const response = await fetch(\"http://127.0.0.1:5000/upload\", {\n          // Ensure this matches your backend URL\n          method: \"POST\",\n          body: formData\n        });\n        if (!response.ok) {\n          throw new Error(`Server error: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(\"Scanned Medicine:\", data);\n        if (data.medicine) {\n          alert(`Detected Medicine: ${data.medicine}`);\n        } else {\n          alert(\"Medicine not recognized. Try again.\");\n        }\n      } catch (error) {\n        console.error(\"Error scanning:\", error);\n        alert(\"Failed to scan. Please try again.\");\n      }\n    }, \"image/jpeg\");\n  };\n  const checkDosageStatus = async medicine => {\n    try {\n      const response = await fetch(\"/check-dosage\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          medicine\n        })\n      });\n      const data = await response.json();\n      if (data.overdose) {\n        speakText(`Warning! You have already taken the prescribed amount of ${medicine}.`);\n      } else if (data.next_dose_time) {\n        speakText(`You should take ${medicine} at ${data.next_dose_time}. Have you taken it now?`);\n        listenForResponse(medicine); // Capture user's audio response\n      } else {\n        speakText(\"Error checking dosage.\");\n      }\n    } catch (error) {\n      console.error(\"Error checking dosage:\", error);\n    }\n  };\n  const listenForResponse = medicine => {\n    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n    recognition.lang = \"en-US\";\n    recognition.start();\n    recognition.onresult = async event => {\n      const responseText = event.results[0][0].transcript.toLowerCase();\n      setUserResponse(responseText);\n      if (responseText.includes(\"yes\")) {\n        await fetch(\"/log-dosage\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            medicine\n          })\n        });\n        speakText(`Your dose for ${medicine} has been recorded.`);\n      } else {\n        speakText(\"No dose recorded. Please take your medicine on time.\");\n      }\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: scanMedicine,\n      children: \"Scan Medicine\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(CameraScanner, \"UliiNed12mWW29Mlb/1zBWU5n4Q=\");\n_c = CameraScanner;\nexport default CameraScanner;\nvar _c;\n$RefreshReg$(_c, \"CameraScanner\");","map":{"version":3,"names":["useState","speakText","jsxDEV","_jsxDEV","CameraScanner","_s","scannedMedicine","setScannedMedicine","userResponse","setUserResponse","scanMedicine","canvas","document","createElement","video","querySelector","width","videoWidth","height","videoHeight","ctx","getContext","drawImage","toBlob","blob","formData","FormData","append","response","fetch","method","body","ok","Error","status","data","json","console","log","medicine","alert","error","checkDosageStatus","headers","JSON","stringify","overdose","next_dose_time","listenForResponse","recognition","window","SpeechRecognition","webkitSpeechRecognition","lang","start","onresult","event","responseText","results","transcript","toLowerCase","includes","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["S:/New folder/medbuddy/src/components/CameraScanner.js"],"sourcesContent":["import { useState } from \"react\";\nimport { speakText } from \"./audioUtils\"; // Helper to convert text to speech\n\nconst CameraScanner = () => {\n  const [scannedMedicine, setScannedMedicine] = useState(null);\n  const [userResponse, setUserResponse] = useState(null);\n\n  const scanMedicine = async () => {\n    const canvas = document.createElement(\"canvas\");\n    const video = document.querySelector(\"video\");\n    if (!video) return;\n  \n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n  \n    canvas.toBlob(async (blob) => {\n      const formData = new FormData();\n      formData.append(\"image\", blob, \"capture.jpg\");\n  \n      try {\n        const response = await fetch(\"http://127.0.0.1:5000/upload\", {  // Ensure this matches your backend URL\n          method: \"POST\",\n          body: formData,\n        });\n  \n        if (!response.ok) {\n          throw new Error(`Server error: ${response.status}`);\n        }\n  \n        const data = await response.json();\n        console.log(\"Scanned Medicine:\", data);\n  \n        if (data.medicine) {\n          alert(`Detected Medicine: ${data.medicine}`);\n        } else {\n          alert(\"Medicine not recognized. Try again.\");\n        }\n      } catch (error) {\n        console.error(\"Error scanning:\", error);\n        alert(\"Failed to scan. Please try again.\");\n      }\n    }, \"image/jpeg\");\n};\n  \n  const checkDosageStatus = async (medicine) => {\n    try {\n      const response = await fetch(\"/check-dosage\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ medicine }),\n      });\n      const data = await response.json();\n\n      if (data.overdose) {\n        speakText(`Warning! You have already taken the prescribed amount of ${medicine}.`);\n      } else if (data.next_dose_time) {\n        speakText(`You should take ${medicine} at ${data.next_dose_time}. Have you taken it now?`);\n        listenForResponse(medicine); // Capture user's audio response\n      } else {\n        speakText(\"Error checking dosage.\");\n      }\n    } catch (error) {\n      console.error(\"Error checking dosage:\", error);\n    }\n  };\n\n  const listenForResponse = (medicine) => {\n    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n    recognition.lang = \"en-US\";\n    recognition.start();\n\n    recognition.onresult = async (event) => {\n      const responseText = event.results[0][0].transcript.toLowerCase();\n      setUserResponse(responseText);\n\n      if (responseText.includes(\"yes\")) {\n        await fetch(\"/log-dosage\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ medicine }),\n        });\n        speakText(`Your dose for ${medicine} has been recorded.`);\n      } else {\n        speakText(\"No dose recorded. Please take your medicine on time.\");\n      }\n    };\n  };\n\n  return (\n    <div>\n      <button onClick={scanMedicine}>Scan Medicine</button>\n    </div>\n  );\n};\n\nexport default CameraScanner;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}