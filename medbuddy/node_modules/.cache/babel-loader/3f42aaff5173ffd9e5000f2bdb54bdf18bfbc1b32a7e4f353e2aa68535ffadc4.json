{"ast":null,"code":"var _jsxFileName = \"S:\\\\New folder\\\\medbuddy\\\\src\\\\CameraScanner.js\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CameraScanner = () => {\n  _s();\n  const [medicineInfo, setMedicineInfo] = useState(null);\n  const [isCapturing, setIsCapturing] = useState(false);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Start the camera automatically when the component loads\n  useEffect(() => {\n    const startCamera = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n      } catch (error) {\n        console.error(\"Error accessing camera:\", error);\n      }\n    };\n    startCamera();\n  }, []);\n\n  // Capture image and automatically upload it\n  const captureAndUploadImage = async () => {\n    setIsCapturing(true); // Hide button after capture\n\n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n    if (canvas && video) {\n      const context = canvas.getContext(\"2d\");\n      context.drawImage(video, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(async blob => {\n        const file = new File([blob], \"captured-image.jpg\", {\n          type: \"image/jpeg\"\n        });\n        try {\n          const bucketName = \"medbuddy-medicine-images\"; // Your S3 bucket\n          const imageName = `uploads/${file.name}`;\n\n          // Upload image to S3\n          const uploadUrl = `https://xqw2x3kybi.execute-api.ap-south-1.amazonaws.com/test/camerafunction`;\n          await axios.put(uploadUrl, file, {\n            headers: {\n              \"Content-Type\": file.type\n            }\n          });\n\n          // Call Lambda function to extract medicine details\n          const lambdaUrl = \"https://xqw2x3kybi.execute-api.ap-south-1.amazonaws.com/test/extract\";\n          const response = await axios.post(lambdaUrl, {\n            bucketName,\n            imageName\n          });\n\n          // Show results\n          setMedicineInfo(response.data);\n        } catch (error) {\n          console.error(\"Error processing image:\", error);\n          alert(\"Failed to process image. Please try again.\");\n        }\n      }, \"image/jpeg\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Scan Your Medicine\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      className: \"\",\n      ref: videoRef,\n      autoPlay: true,\n      playsInline: true,\n      width: \"300\",\n      height: \"200\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: \"300\",\n      height: \"200\",\n      style: {\n        display: \"none\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), !isCapturing && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: captureAndUploadImage,\n      children: \"Capture Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 30\n    }, this), medicineInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Detected Medicine: \", medicineInfo.medicineName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: JSON.stringify(medicineInfo.medicineDetails, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(CameraScanner, \"MGYNFzbgAs/X8zzPDTHMAG3KFxE=\");\n_c = CameraScanner;\nexport default CameraScanner;\nvar _c;\n$RefreshReg$(_c, \"CameraScanner\");","map":{"version":3,"names":["axios","React","useState","useRef","useEffect","jsxDEV","_jsxDEV","CameraScanner","_s","medicineInfo","setMedicineInfo","isCapturing","setIsCapturing","videoRef","canvasRef","startCamera","stream","navigator","mediaDevices","getUserMedia","video","current","srcObject","error","console","captureAndUploadImage","canvas","context","getContext","drawImage","width","height","toBlob","blob","file","File","type","bucketName","imageName","name","uploadUrl","put","headers","lambdaUrl","response","post","data","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","className","ref","autoPlay","playsInline","style","display","onClick","medicineName","JSON","stringify","medicineDetails","_c","$RefreshReg$"],"sources":["S:/New folder/medbuddy/src/CameraScanner.js"],"sourcesContent":["import axios from \"axios\";\nimport React, { useState, useRef, useEffect } from \"react\";\n\nconst CameraScanner = () => {\n    const [medicineInfo, setMedicineInfo] = useState(null);\n    const [isCapturing, setIsCapturing] = useState(false);\n    const videoRef = useRef(null);\n    const canvasRef = useRef(null);\n\n    // Start the camera automatically when the component loads\n    useEffect(() => {\n        const startCamera = async () => {\n            try {\n                const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n                if (videoRef.current) {\n                    videoRef.current.srcObject = stream;\n                }\n            } catch (error) {\n                console.error(\"Error accessing camera:\", error);\n            }\n        };\n\n        startCamera();\n    }, []);\n\n    // Capture image and automatically upload it\n    const captureAndUploadImage = async () => {\n        setIsCapturing(true); // Hide button after capture\n\n        const canvas = canvasRef.current;\n        const video = videoRef.current;\n        if (canvas && video) {\n            const context = canvas.getContext(\"2d\");\n            context.drawImage(video, 0, 0, canvas.width, canvas.height);\n            canvas.toBlob(async (blob) => {\n                const file = new File([blob], \"captured-image.jpg\", { type: \"image/jpeg\" });\n\n                try {\n                    const bucketName = \"medbuddy-medicine-images\"; // Your S3 bucket\n                    const imageName = `uploads/${file.name}`;\n\n                    // Upload image to S3\n                    const uploadUrl = `https://xqw2x3kybi.execute-api.ap-south-1.amazonaws.com/test/camerafunction`;\n                    await axios.put(uploadUrl, file, { headers: { \"Content-Type\": file.type } });\n\n                    // Call Lambda function to extract medicine details\n                    const lambdaUrl = \"https://xqw2x3kybi.execute-api.ap-south-1.amazonaws.com/test/extract\";\n                    const response = await axios.post(lambdaUrl, { bucketName, imageName });\n\n                    // Show results\n                    setMedicineInfo(response.data);\n                } catch (error) {\n                    console.error(\"Error processing image:\", error);\n                    alert(\"Failed to process image. Please try again.\");\n                }\n            }, \"image/jpeg\");\n        }\n    };\n\n    return (\n        <div>\n            <h2>Scan Your Medicine</h2>\n            <video className=\"\" ref={videoRef} autoPlay playsInline width=\"300\" height=\"200\"></video>\n            <canvas ref={canvasRef} width=\"300\" height=\"200\" style={{ display: \"none\" }}></canvas>\n\n            {!isCapturing && <button onClick={captureAndUploadImage}>Capture Image</button>}\n\n            {medicineInfo && (\n                <div>\n                    <h3>Detected Medicine: {medicineInfo.medicineName}</h3>\n                    <p>{JSON.stringify(medicineInfo.medicineDetails, null, 2)}</p>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default CameraScanner;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}